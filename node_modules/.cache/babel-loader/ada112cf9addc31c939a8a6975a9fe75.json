{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jessie/Downloads/fullstack_ass/ass/assign/src/Weather.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WeatherIcon from './WeatherIcon';\nexport default class Weather extends Component {\n  //Define state default values\n  constructor() {\n    super();\n    this.state = {\n      forecast: [],\n      coord: {},\n      weather: [],\n      main: {},\n      winds: {},\n      clouds: {},\n      sys: {}\n    };\n  } //Component Lifecycle Callback\n\n\n  componentDidMount() {\n    // retrieve weather info\n    axios.get(`https:api.openweathermap.org/data/2.5/weather?q=Toronto&appid=0075d6a7c0a4afa060d8299f822f958f`).then(res => {\n      console.log(res.data); // retrieve data objects\n\n      const forecast = res.data;\n      const coord = forecast.coord;\n      const weather = forecast.weather[0];\n      const main = forecast.main;\n      const winds = forecast.winds;\n      const clouds = forecast.clouds;\n      const sys = forecast.sys; // set states\n\n      this.setState({\n        forecast,\n        coord,\n        weather,\n        main,\n        winds,\n        clouds,\n        sys\n      });\n    }).catch(err => {\n      console.error(\"Error : \", err);\n    });\n  }\n\n  render() {\n    // get current date\n    const getCurrentDate = () => {\n      var date = new Date().getDate();\n      var month = new Date().getMonth() + 1;\n      var year = new Date().getFullYear();\n      var hours = new Date().getHours();\n      var min = new Date().getMinutes();\n      var dt = \"(\" + date + \"-\" + month + \"-\" + year + \"; \" + hours + \":\" + min + \")\";\n      return dt; //format: dd-mm-yyyy;\n    }; // get weather icon\n\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"container-fluid text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [this.state.forecast.name, \", \", this.state.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"UTC \", this.state.forecast.timezone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"(latitude: \", this.state.coord.lat, \" \\xA0 longitude: \", this.state.coord.lon, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getCurrentDate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.weather.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.weather.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jessie/Downloads/fullstack_ass/ass/assign/src/Weather.js"],"names":["React","Component","axios","Container","Button","WeatherIcon","Weather","constructor","state","forecast","coord","weather","main","winds","clouds","sys","componentDidMount","get","then","res","console","log","data","setState","catch","err","error","render","getCurrentDate","date","Date","getDate","month","getMonth","year","getFullYear","hours","getHours","min","getMinutes","dt","name","country","timezone","lat","lon","icon"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport WeatherIcon from './WeatherIcon'\n\n\nexport default class Weather extends Component {\n\n    //Define state default values\n    \n    constructor() {\n        super();\n        this.state = {\n            forecast: [],\n            coord: {},\n            weather: [],\n            main: {},\n            winds: {},\n            clouds: {},\n            sys: {},\n            \n        };\n    }\n    \n     //Component Lifecycle Callback\n    componentDidMount() {\n        // retrieve weather info\n        axios.get(`https:api.openweathermap.org/data/2.5/weather?q=Toronto&appid=0075d6a7c0a4afa060d8299f822f958f`)\n        .then(res => {\n            console.log(res.data);\n            // retrieve data objects\n            const forecast = res.data;\n            const coord = forecast.coord;\n            const weather = forecast.weather[0];\n            const main = forecast.main;\n            const winds = forecast.winds;\n            const clouds = forecast.clouds;\n            const sys = forecast.sys;\n\n            // set states\n            this.setState({ forecast, coord, weather, main, winds,\n                clouds, sys });\n        })\n            .catch(err => {\n                console.error(\"Error : \", err)\n        })\n    }\n\n\n    render() {\n\n        // get current date\n        const getCurrentDate=()=>{\n            \n      var date = new Date().getDate();\n      var month = new Date().getMonth() + 1;\n      var year = new Date().getFullYear();\n      var hours = new Date().getHours(); \n        var min = new Date().getMinutes(); \n\n      var dt = \"(\"+date+\"-\"+month+\"-\"+year+\"; \"+hours+\":\"+min+\")\"\n      return dt;//format: dd-mm-yyyy;\n}\n\n// get weather icon\n\n\n\n        return (\n            <Container className=\"container-fluid text-center\">\n                <h1 className=\"text-center\">User List</h1>\n                <h3>{this.state.forecast.name}, {this.state.sys.country}</h3>\n                <h5>UTC {this.state.forecast.timezone}</h5>\n                <p>(latitude: {this.state.coord.lat} &nbsp;\n                    longitude: {this.state.coord.lon})</p>\n                <p>{getCurrentDate()}</p>\n                <p>{this.state.weather.icon}</p>\n                <p>{this.state.weather.icon}</p>\n        \n\n\n\n                <h5></h5>\n                \n                \n                \n            </Container>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}